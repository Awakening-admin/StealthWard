- name: Setup EDR endpoint with complete SSH configuration
  hosts: endpoints
  become: true
  gather_facts: true

  vars:
    admin_user: "robot"
    admin_host: "192.168.100.24"
    admin_ssh_dir: "/home/{{ admin_user }}/.ssh"
    endpoint_user: "{{ ansible_user }}"
    endpoint_ssh_dir: "/home/{{ endpoint_user }}/.ssh"
    agent_remote_dir: "/var/edr_agent"
    admin_pcap_dir: "/home/robot/edr_server/pcap_files"
    admin_log_dir: "/home/robot/edr_server/Logs"
    admin_alert_dir: "/home/robot/edr_server/alerts"

  tasks:
    # ===================== SSH SETUP =====================
    - name: Add endpoint to admin's known_hosts to avoid fingerprint prompt
      delegate_to: localhost
      become: false
      known_hosts:
        path: "/home/{{ admin_user }}/.ssh/known_hosts"
        name: "{{ inventory_hostname }}"
        key: "{{ lookup('pipe', 'ssh-keyscan -H ' + inventory_hostname) }}"

    - name: Ensure admin SSH key exists
      delegate_to: localhost
      become: false
      block:
        - name: Create admin .ssh directory
          file:
            path: "{{ admin_ssh_dir }}"
            state: directory
            mode: '0700'
            owner: "{{ admin_user }}"
            group: "{{ admin_user }}"

        - name: Generate admin SSH key if not exists
          command: ssh-keygen -t rsa -b 4096 -f "{{ admin_ssh_dir }}/id_rsa" -N "" -q
          args:
            creates: "{{ admin_ssh_dir }}/id_rsa.pub"
          become_user: "{{ admin_user }}"

    - name: Ensure .ssh directory exists on endpoint
      file:
        path: "{{ endpoint_ssh_dir }}"
        state: directory
        mode: '0700'
        owner: "{{ endpoint_user }}"
        group: "{{ endpoint_user }}"

    - name: Generate SSH key on endpoint
      ansible.builtin.command:
        cmd: ssh-keygen -t rsa -b 2048 -f "{{ endpoint_ssh_dir }}/id_rsa" -N ""
        creates: "{{ endpoint_ssh_dir }}/id_rsa"
      become_user: "{{ endpoint_user }}"

    - name: Copy admin's public key to endpoint
      authorized_key:
        user: "{{ endpoint_user }}"
        state: present
        key: "{{ lookup('file', '/home/robot/.ssh/id_rsa.pub') }}"
        path: "{{ endpoint_ssh_dir }}/authorized_keys"
      become: true

    - name: Get endpoint's public key
      shell: cat "{{ endpoint_ssh_dir }}/id_rsa.pub"
      register: endpoint_pubkey
      become: false
      changed_when: false

    - name: Manually add endpoint key to admin's authorized_keys
      local_action:
        module: lineinfile
        path: "/home/robot/.ssh/authorized_keys"
        line: "{{ endpoint_pubkey.stdout }}"
        create: yes
        state: present
      become: false

    - name: Configure SSH to disable strict host key checking for admin
      copy:
        dest: "{{ endpoint_ssh_dir }}/config"
        content: |
          Host {{ admin_host }}
              StrictHostKeyChecking no
              UserKnownHostsFile=/dev/null
              User {{ admin_user }}
              IdentityFile {{ endpoint_ssh_dir }}/id_rsa
              ControlPath {{ endpoint_ssh_dir }}/control:%h:%p:%r
              ControlMaster auto
              ControlPersist 10m
        owner: "{{ endpoint_user }}"
        group: "{{ endpoint_user }}"
        mode: '0600'

    - name: Fix SSH key permissions on endpoint
      file:
        path: "{{ endpoint_ssh_dir }}/{{ item }}"
        mode: '0600'
        owner: "{{ endpoint_user }}"
        group: "{{ endpoint_user }}"
      loop:
        - id_rsa
        - id_rsa.pub
        - authorized_keys
        - config
      become: true

    - name: Set SELinux context for SSH files (Fedora)
      sefcontext:
        target: "{{ endpoint_ssh_dir }}/.*"
        setype: ssh_home_t
        reload: yes
      when: ansible_facts['distribution'] == 'fedora'
      become: true

    - name: Allow password authentication for SSH (testing)
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^#?PasswordAuthentication"
        line: "PasswordAuthentication yes"
        state: present
      notify: Restart sshd
      become: true

    - name: Ensure home directory permissions are correct
      file:
        path: "/home/{{ endpoint_user }}"
        mode: '0700'
        owner: "{{ endpoint_user }}"
        group: "{{ endpoint_user }}"
      become: true

    - name: Test endpoint->admin SSH connection
      command: ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no {{ admin_user }}@{{ admin_host }} exit
      register: ssh_test
      ignore_errors: yes
      changed_when: false

    - name: Show SSH test result
      debug:
        msg: |
          Endpoint->Admin SSH: {{ 'SUCCESS' if ssh_test.rc == 0 else 'FAILED' }}
          {% if ssh_test.rc != 0 %}
          Troubleshooting:
          1. Verify /home/{{ admin_user }}/.ssh/authorized_keys contains endpoint's key
          2. Check permissions (700 .ssh, 600 authorized_keys)
          3. Check /var/log/auth.log on admin server
          4. Verify admin host IP is correct: {{ admin_host }}
          5. On Fedora, check SELinux with: ausearch -m avc -ts recent
          {% endif %}

    # ===================== EDR AGENT SETUP =====================
    - name: Install EDR dependencies
      block:
        - name: Install Debian packages
          apt:
            name:
              - tcpdump
              - libpcap-dev
              - libcap2-bin
              - sshpass
              - libjansson-dev
              - iptables-persistent
              - inotify-tools
            state: present
            update_cache: yes
          when: ansible_facts['os_family'] == 'Debian'

        - name: Install Arch packages
          pacman:
            name:
              - tcpdump
              - libpcap
              - libcap
              - sshpass
              - jansson
              - nftables
              - inotify-tools
            state: present
            update_cache: yes
          when: ansible_facts['distribution'] in ['arch', 'cachyos']

        - name: Install Fedora packages using dnf
          dnf:
            name:
              - tcpdump
              - libpcap-devel
              - libcap-ng
              - sshpass
              - jansson
              - firewalld
              - inotify-tools
              - nftables
              - rsync
              - openssh-clients
              - policycoreutils-python-utils
            state: present
          when: ansible_facts['distribution'] == 'fedora'

      rescue:
        - name: Fallback to command line dnf
          command: dnf install -y tcpdump libpcap-devel libcap-ng sshpass jansson firewalld inotify-tools nftables rsync openssh-clients policycoreutils-python-utils
          when: ansible_facts['distribution'] == 'fedora'
          ignore_errors: yes

    # ===================== FIREWALL SERVICES =====================
    - name: Ensure iptables services are running (Ubuntu/Debian)
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - netfilter-persistent
        - iptables
      when: ansible_facts['os_family'] == 'Debian'

    - name: Ensure nftables service is running (Arch/Fedora)
      systemd:
        name: nftables
        state: started
        enabled: yes
      when: ansible_facts['distribution'] in ['arch', 'cachyos', 'fedora']

    - name: Ensure firewalld service is running (Fedora)
      systemd:
        name: firewalld
        state: started
        enabled: yes
      when: ansible_facts['distribution'] == 'fedora'

    - name: Allow SSH in firewalld (Fedora)
      firewalld:
        service: ssh
        permanent: yes
        state: enabled
      when: ansible_facts['distribution'] == 'fedora'
      become: true

    # ===================== FIREWALL RULES =====================
    - name: Create initial nftables rules (Arch/Fedora)
      copy:
        dest: /etc/nftables.conf
        content: |
          #!/usr/sbin/nft -f
          flush ruleset
          table inet filter {
              chain input {
                  type filter hook input priority 0;
              }
              chain forward {
                  type filter hook forward priority 0;
              }
          }
        mode: '0644'
      when: ansible_facts['distribution'] in ['arch', 'cachyos', 'fedora']
      notify: Restart nftables

    - name: Create initial iptables rules (Ubuntu/Debian)
      copy:
        dest: /etc/iptables/rules.v4
        content: |
          *filter
          :INPUT ACCEPT [0:0]
          :FORWARD ACCEPT [0:0]
          :OUTPUT ACCEPT [0:0]
          COMMIT
        mode: '0644'
      when: ansible_facts['os_family'] == 'Debian'
      notify: Restart iptables

    # ===================== SUDOERS CONFIG =====================
    - name: Configure comprehensive sudoers for EDR agent
      copy:
        dest: "/etc/sudoers.d/edr_agent"
        content: |
          {{ endpoint_user }} ALL=(root) NOPASSWD: /usr/bin/cat /var/log/*
          {{ endpoint_user }} ALL=(root) NOPASSWD: /usr/bin/tail /var/log/*
                
          # Direct file access (needed for Rust agent)
          {{ endpoint_user }} ALL=(root) NOPASSWD: /usr/bin/head /var/log/*
          {{ endpoint_user }} ALL=(root) NOPASSWD: /usr/bin/journalctl *
          # Firewall commands
          {{ endpoint_user }} ALL=(root) NOPASSWD: /usr/sbin/iptables *
          {{ endpoint_user }} ALL=(root) NOPASSWD: /usr/sbin/nft *
          
          # Agent binaries
          {{ endpoint_user }} ALL=(root) NOPASSWD: {{ agent_remote_dir }}/agent
          {{ endpoint_user }} ALL=(root) NOPASSWD: {{ agent_remote_dir }}/Lagentt
          
          # System commands
          {{ endpoint_user }} ALL=(root) NOPASSWD: /usr/bin/systemctl *
        mode: '0440'
      become: true

    # ===================== AGENT DIRECTORIES AND FILES =====================
    - name: Create agent directories
      file:
        path: "{{ item.path }}"
        state: directory
        owner: "{{ endpoint_user }}"
        group: "{{ endpoint_user }}"
        mode: "{{ item.mode }}"
      loop:
        - { path: "{{ agent_remote_dir }}", mode: '0775' }
        - { path: "{{ agent_remote_dir }}/pcap_files", mode: '0777' }
        - { path: "{{ agent_remote_dir }}/alerts", mode: '0777' }
      become: true

    - name: Copy agent binaries from controller
      copy:
        src: "{{ item }}"
        dest: "{{ agent_remote_dir }}/{{ item }}"
        mode: '0755'
        remote_src: no  # Force copy from Ansible controller
      loop:
        - "agent"
        - "Lagentt"
      become: true

    - name: Set capabilities on binaries
      command: setcap 'CAP_DAC_READ_SEARCH+eip CAP_NET_RAW+eip CAP_NET_ADMIN+eip' {{ agent_remote_dir }}/{{ item }}
      loop:
        - agent
        - Lagentt
      become: true
    
    # Add group membership for log access (add this task)
    - name: Add user to required groups for log access
      user:
        name: "{{ endpoint_user }}"
        groups: "adm,utmp"
        append: yes
      become: true
    
    - name: Ensure parent directory permissions
      file:
        path: /var
        state: directory
        mode: '0755'
      become: true

    - name: Create admin server directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ admin_user }}"
        group: "{{ admin_user }}"
        mode: '0755'
      loop:
        - "/home/robot/edr_server"
        - "{{ admin_pcap_dir }}"
        - "{{ admin_alert_dir }}"
      delegate_to: localhost

  handlers:
    - name: Restart nftables
      systemd:
        name: nftables
        state: restarted

    - name: Restart iptables
      systemd:
        name: netfilter-persistent
        state: restarted

    - name: Restart sshd
      systemd:
        name: sshd
        state: restarted
      become: true
